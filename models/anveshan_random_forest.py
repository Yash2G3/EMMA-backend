# -*- coding: utf-8 -*-
"""anveshan_random_forest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sOUYcKDv41LBK4-VilI2j21SIjM8Q577
"""

import pandas as pd

!pip install pycaret
import pycaret

df = pd.read_csv('patient_data.csv')

df.head()

import pycaret

from pycaret.classification import *
df_new = setup(data = df,target="Output", remove_outliers = True, outliers_method='lof')

type(df_new)

df_new = df_new.dataset
df_updated = pd.DataFrame(df_new)

import matplotlib.pyplot as plt
import seaborn as sns

df['Output'].unique()
outputs = df["Output"].value_counts()

#visualising the output

sns.barplot(x=outputs.index, y=outputs.values)
plt.show()

df_updated['Output'].unique()
outputs = df_updated["Output"].value_counts()

#visualising the output

sns.barplot(x=outputs.index, y=outputs.values)
plt.show()

best = compare_models()

et = create_model('et')
plot_model(et, plot = "confusion_matrix", plot_kwargs={'percent': True})

predict_model(et,raw_score=True, data = df)

df

df_new = df.drop(['Time_seconds'],axis=1)

df_new

null = df[df.isnull().any(axis =1)]
print(null)

df = df.dropna()
df= df.sample(frac=1.0, random_state = 42)
# df = df.drop(['Time_seconds'],axis=1)
y=df['Output']
X=df.drop(['Output','Patient_No'],axis=1)

X.iloc[467]

from pycaret.classification import *

X.head()

X.describe()

y.describe()



from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline

resampling_pipeline = Pipeline([
    ('oversample', SMOTE(sampling_strategy = 0.85))
])

X_resampled,y_resampled = resampling_pipeline.fit_resample(X,y)

resampled_df = pd.DataFrame(data=X_resampled, columns=X.columns)
resampled_df['Output'] = y_resampled

resampled_df['Output'].unique()
outputs = resampled_df["Output"].value_counts()

#visualising the output

sns.barplot(x=outputs.index, y=outputs.values)
plt.show()

resampled_df.describe()

import numpy as np
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=42)

df_train = setup(data = resampled_df, target = "Output", preprocess=False)
best = compare_models()

rf = create_model("rf")

rf = create_model("rf")
light_gbm = create_model("lightgbm")

# from sklearn.tree import plot_tree

# tree = rf[0]

# plt.figure(figsize=(150,20))
# tree = plot_tree(tree, filled =True, feature_names= resampled_df.columns[:-1], class_names=[str(i) for i in resampled_df["Output"].unique()])
# # plt.savefig("random_forest_tree.jpg")

# plt.savefig("random_forest.jpg")

